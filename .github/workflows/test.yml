name: Go Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      working-directory: ./server
      run: go mod download
    
    - name: Verify dependencies
      working-directory: ./server
      run: go mod verify
    
    - name: Run vet
      working-directory: ./server
      run: go vet ./...
    
    - name: Run fmt check
      working-directory: ./server
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run Unit Tests
      working-directory: ./server
      run: make test-unit
    
    - name: Run Router Tests  
      working-directory: ./server
      run: make test-router
    
    - name: Run Integration Tests
      working-directory: ./server
      run: make test-integration
    
    - name: Run All Tests with Coverage
      working-directory: ./server
      run: make test-coverage
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build binary
      working-directory: ./server
      run: make build
    
    - name: Test binary runs
      working-directory: ./server
      run: |
        timeout 5s ./out/server -db-driver=memory || [ $? -eq 124 ]

  test-database-drivers:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Download dependencies
      working-directory: ./server
      run: go mod download
    
    - name: Test with in-memory database
      working-directory: ./server
      run: make test-inmem
    
    - name: Test SQLite integration
      working-directory: ./server
      run: |
        timeout 5s make run-sqlite || [ $? -eq 124 ] 